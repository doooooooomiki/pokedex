---
import PokeDisplay from "./PokeDisplay.astro";
import PokeKeyboard from "./PokeKeyboard.astro";
---

<poke-dex>
  <PokeDisplay />
  <PokeKeyboard />
</poke-dex>

<script>
  
  class PokeDex extends HTMLElement {
    constructor() {
      super();
      this._pokeNames = null;
      this._pokeValue = '';
    }

    set pokeNames(val) {
      this._pokeNames = val;
    }

    get pokeNames() {
      return this._pokeNames;
    }

    set pokeValue(val) {
      this._pokeValue = val;
    }

    get pokeValue() {
      return this._pokeValue;
    }

    get pokeDisplay() {
      return this.querySelector('poke-display');
    }

    get pokeInput() {
      return this.querySelector('poke-input');
    }

    async fetchPokemonNames() {
      const url = '/pokemon-names.json';
      const res = await fetch(url);
      return res.ok 
        ? await res.json()
        : Promise.reject(new Error(`${res.status}`));
    }

    async fetchPokemonById(id) {
      const url = `https://pokeapi.co/api/v2/pokemon/${id}`;
      const res = await fetch(url);
      return res.ok 
        ? await res.json()
        : Promise.reject(new Error(`${res.status}`));
    }

    async searchForIdByName(pokename) {
      const foundling = (await this.pokeNames).find(pokemon => pokemon.name.toLowerCase() === pokename);
      return foundling 
        ? foundling.pokemon_species_id
        : Promise.reject(new Error(`no foundling for ${pokename}`));
    }

    async catchPokemon(pokename) {
      const id = await this.searchForIdByName(pokename);
      const data = await this.fetchPokemonById(id);
      return {
        src: data.sprites.front_default,
      };
    }

    catchError(err) {
      if ('vibrate' in navigator) navigator.vibrate(666);
    }

    pokeDisplayUpdateOnSuccess(pokemon) {
      this.pokeDisplay.setAttribute('poke-src', pokemon.src);
      this.pokeDisplay.setAttribute('poke-signal', 'success');
      this.pokeValue = '';
      this.pokeInput.setAttribute('poke-value', this.pokeValue);
    }

    pokeDisplayUpdateOnError() {
      if ('vibrate' in navigator) navigator.vibrate(666);
      console.log(this);
      this.pokeDisplay.setAttribute('poke-signal', 'error');
    }

    onPokeEnterDown() {
      this.catchPokemon(this.pokeValue)
        .then((pokemon) => this.pokeDisplayUpdateOnSuccess(pokemon))
        .catch(this.pokeDisplayUpdateOnError.bind(this));
    }

    onPokeBackSpaceDown() {
      this.pokeValue = this.pokeValue.slice(0, -1);
      this.pokeInput.setAttribute('poke-value', this.pokeValue);
    }

    onPokeKeyDown(e) {
      if (this.pokeValue.length >= 11) {
        if ('vibrate' in navigator) navigator.vibrate(666);
        this.pokeDisplay.setAttribute('poke-signal', 'error');

        return;
      }
      this.pokeDisplay.setAttribute('poke-signal', 'pending');

      this.pokeValue += e.detail.key
      this.pokeInput.setAttribute('poke-value', this.pokeValue);
    }

    connectedCallback() {
      this.addEventListener('pokeenterdown', this.onPokeEnterDown);
      this.addEventListener('pokebackspacedown', this.onPokeBackSpaceDown);
      this.addEventListener('pokekeydown', this.onPokeKeyDown);
      this.fetchPokemonNames()
        .then(names => this.pokeNames = names)
        .catch(this.catchError);
    }

  }
  customElements.define("poke-dex", PokeDex);
</script>