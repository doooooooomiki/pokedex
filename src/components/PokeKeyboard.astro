---
import Button from "./Button.astro";
---

<poke-keyboard>
  <div class="row">
    <Button key="q" type="key" />
    <Button key="w" type="key" />
    <Button key="e" type="key" />
    <Button key="r" type="key" />
    <Button key="t" type="key" />
    <Button key="z" type="key" />
    <Button key="u" type="key" />
    <Button key="i" type="key" />
    <Button key="o" type="key" />
    <Button key="p" type="key" />
  </div>
  <div class="row">
    <div class="spacer small"></div>
    <Button key="a" type="key" />
    <Button key="s" type="key" />
    <Button key="d" type="key" />
    <Button key="f" type="key" />
    <Button key="g" type="key" />
    <Button key="h" type="key" />
    <Button key="j" type="key" />
    <Button key="k" type="key" />
    <Button key="l" type="key" />
    <div class="spacer small"></div>
  </div>
  <div class="row">
    <Button key="enter" type="enter" class="big" />
    <Button key="y" type="key" />
    <Button key="x" type="key" />
    <Button key="c" type="key" />
    <Button key="v" type="key" />
    <Button key="b" type="key" />
    <Button key="n" type="key" />
    <Button key="m" type="key" />
    <Button key="backspace" type="backspace" class="big" />
  </div>
</poke-keyboard>

<script>
  class PokeKeyboard extends HTMLElement {
    constructor() {
      super();

      this._pokeCache = null;

      this._typingAudioSources = [
        '/typing-sound-1.mp3',
        '/typing-sound-2.mp3',
      ];

      this._cachedAudioSources = [];

      this._allowedKeys = [
        'q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p',
        'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
        'y', 'x', 'c', 'v', 'b', 'n', 'm',
        'Enter', 'Backspace',
      ];

    }

    get cachedAudioSources() {
      return this._cachedAudioSources
    }

    set cachedAudioSources(val) {
      this._cachedAudioSources = val;
    }

    get pokeCache() {
      return this._pokeCache;
    }

    set pokeCache(val) {
      this._pokeCache = val;
    }

    get allowedKeys() {
      return this._allowedKeys;
    }

    get buttons() {
      return this.querySelectorAll('button');
    }

    get typingAudioSources() {
      return this._typingAudioSources;
    }

    deletegateKeyEventToPointerHandler(e) {
      const currentTarget = this.querySelector(`button[data-key="${e.key.toLowerCase()}"]`);
      e.type === 'keydown'
        ? this.onPointerDown({currentTarget})
        : this.onPointerUp({currentTarget});
    }

    dispatchCustomPokeEvent(e) {
      const type = e.currentTarget.dataset.type;
      const key = e.currentTarget.dataset.key;
      this.dispatchEvent(new CustomEvent(`poke${type}down`, {
        detail: { key },
        bubbles: true,
      }));
    }

    async pushCachedSources(sources) {
      const arr = [];
      for (const source of sources) {
        const response = await this.pokeCache.match(source);
        const reader = await response.body.getReader();
        const {value: chunk } = await reader.read();
        const url = URL.createObjectURL(new Blob([chunk.buffer], {type: 'audio/mpeg'}))
        arr.push(url);
      }
      return arr;
    }

    async pokeCacheInit(sources) {
      this.pokeCache = await caches.open('poke-cache');
      this.pokeCache.addAll(sources);
      this.cachedAudioSources = await this.pushCachedSources(sources);
    }

    classIsDownToggle(e) {
      e.currentTarget.classList.toggle('is-down');
    }

    classIsDownRemove(e) {
      e.currentTarget.classList.remove('is-down');
    }

    onPointerLeave(e) {
      this.classIsDownRemove(e)
    }

    onPointerUp(e) {
      this.classIsDownToggle(e);
    }

    onPointerDown(e) {
      if ('vibrate' in navigator) navigator.vibrate(42);
      const audioSrc = this.cachedAudioSources[Math.floor(Math.random() * this.cachedAudioSources.length)];
      const audio = new Audio(audioSrc);
      audio.play();
      this.classIsDownToggle(e);
      this.dispatchCustomPokeEvent(e);
    }

    onKeyDownOrUp(e) {
      if (!this.allowedKeys.includes(e.key)) return;
      this.deletegateKeyEventToPointerHandler(e);
    }

    connectedCallback() {
      if ('caches' in window) this.pokeCacheInit(this.typingAudioSources);
      document.body.addEventListener('keydown', this.onKeyDownOrUp.bind(this));
      document.body.addEventListener('keyup', this.onKeyDownOrUp.bind(this));
      this.buttons.forEach((button) => {
        button.addEventListener('pointerdown', this.onPointerDown.bind(this));
        button.addEventListener('pointerup', this.onPointerUp.bind(this));
        button.addEventListener('pointerleave', this.onPointerLeave.bind(this));
      });
    }

    disconnectedCallback() {
      document.body.addEventListener('keydown', this.onKeyDownOrUp.bind(this));
      document.body.addEventListener('keyup', this.onKeyDownOrUp.bind(this));
    }
  }
  customElements.define("poke-keyboard", PokeKeyboard);
</script>